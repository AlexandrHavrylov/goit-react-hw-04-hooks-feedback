{"version":3,"sources":["components/Feedback/styled/Statistics.styled.jsx","components/Feedback/Statistics.jsx","components/Feedback/styled/FeedbackOptions.styled.jsx","components/Feedback/FeedbackOptions .jsx","components/Feedback/styled/Section.styled.jsx","components/Feedback/Section.jsx","components/Feedback/styled/Notification.styled.jsx","components/Feedback/Notification.jsx","components/App/App.styled.jsx","components/App/App.jsx","reportWebVitals.js","index.js"],"names":["Stats","styled","ul","Statistics","good","neutral","bad","total","positivePercentage","Number","isNaN","Button","button","props","feedbackType","FeedbackOptions","onLeaveFeedback","options","map","option","onClick","Title","h2","Section","title","children","Notifications","p","Notification","message","Container","div","App","useState","setGood","setNeutral","setBad","countTotalFeedback","positive","Math","round","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAEaA,EAAQC,IAAOC,GAAV,0F,OCELC,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,eAACR,EAAD,WACE,wCAAWI,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,4CACaE,OAAOC,MAAMF,GAAsB,EAAIA,EADpD,WCfOG,EAASV,IAAOW,OAAV,gOASK,SAACC,GACnB,OAAQA,EAAMC,cACZ,IAAK,OACH,MAAO,QACT,IAAK,MACH,MAAO,MACT,QACE,MAAO,WCdJC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,QACjD,OACE,8BACGA,EAAQC,KAAI,SAACC,GACZ,OACE,cAACR,EAAD,CAEEG,aAAcK,EACdC,QAAS,kBAAMJ,EAAgBG,IAHjC,SAKGA,GAJIA,SCRJE,EAAQpB,IAAOqB,GAAV,gDCGLC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,gCACE,cAACJ,EAAD,UAAQG,IACPC,MCPMC,EAAgBzB,IAAO0B,EAAV,qHCEbC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,cAACH,EAAD,UAAgBG,KCHZC,EAAY7B,IAAO8B,IAAV,0FCKf,SAASC,IACd,MAAwBC,mBAAS,GAAjC,mBAAO7B,EAAP,KAAa8B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAO5B,EAAP,KAAgB8B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAO3B,EAAP,KAAY8B,EAAZ,KAkBMC,EAAqB,WACzB,OAAOjC,EAAOC,EAAUC,GAOpBC,EAAQ8B,IAERC,EALGC,KAAKC,MAAOpC,EAAOiC,IAAwB,KAOpD,OACE,eAACP,EAAD,WACE,cAAC,EAAD,CAASN,MAAM,wBAAf,SACE,cAAC,EAAD,CACEP,QAAS,CAAC,OAAQ,UAAW,OAC7BD,gBAjCY,SAACyB,GACnB,OAAQA,GACN,IAAK,OACHP,EAAQ9B,EAAO,GACf,MACF,IAAK,UACH+B,EAAW9B,EAAU,GACrB,MACF,IAAK,MACH+B,EAAO9B,EAAM,GACb,MACF,QACE,aAwBF,cAAC,EAAD,CAASkB,MAAM,aAAf,SACGjB,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoB8B,IAGtB,cAAC,EAAD,CAAcT,QAAQ,2BC1DhC,IAYea,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrB,EAAD,MAEFsB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.64369285.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Stats = styled.ul`\r\n  list-style: none;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n`;\r\n","import React from \"react\";\r\nimport { Stats } from \"./styled/Statistics.styled\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nexport const Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) => {\r\n  return (\r\n    <Stats>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>\r\n        Positive: {Number.isNaN(positivePercentage) ? 0 : positivePercentage}%\r\n      </li>\r\n    </Stats>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\n  margin-right: 10px;\r\n  width: 100px;\r\n  padding: 5px;\r\n  cursor: pointer;\r\n  font-size: 24px;\r\n  border-radius: 10px;\r\n  &:hover {\r\n    transform: scale(1.05);\r\n    background-color: ${(props) => {\r\n      switch (props.feedbackType) {\r\n        case \"good\":\r\n          return \"green\";\r\n        case \"bad\":\r\n          return \"red\";\r\n        default:\r\n          return \"gray\";\r\n      }\r\n    }};\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Button } from \"./styled/FeedbackOptions.styled\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nexport const FeedbackOptions = ({ onLeaveFeedback, options }) => {\r\n  return (\r\n    <div>\r\n      {options.map((option) => {\r\n        return (\r\n          <Button\r\n            key={option}\r\n            feedbackType={option}\r\n            onClick={() => onLeaveFeedback(option)}\r\n          >\r\n            {option}\r\n          </Button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  option: PropTypes.array.isRequired,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Title = styled.h2`\r\n  font-size: 36px;\r\n`;\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nimport { Title } from \"./styled/Section.styled\";\r\n\r\nexport const Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <Title>{title}</Title>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Notifications = styled.p`\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n  color: tomato;\r\n`;\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Notifications } from \"./styled/Notification.styled\";\r\n\r\nexport const Notification = ({ message }) => {\r\n  return <Notifications>{message}</Notifications>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n`;\r\n","import { useState } from \"react\";\r\nimport { Statistics } from \"../Feedback/Statistics\";\r\nimport { FeedbackOptions } from \"components/Feedback/FeedbackOptions \";\r\nimport { Section } from \"components/Feedback/Section\";\r\nimport { Notification } from \"components/Feedback/Notification\";\r\nimport { Container } from \"./App.styled\";\r\n\r\nexport function App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const statCounter = (type) => {\r\n    switch (type) {\r\n      case \"good\":\r\n        setGood(good + 1);\r\n        break;\r\n      case \"neutral\":\r\n        setNeutral(neutral + 1);\r\n        break;\r\n      case \"bad\":\r\n        setBad(bad + 1);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return Math.round((good / countTotalFeedback()) * 100);\r\n  };\r\n\r\n  const total = countTotalFeedback();\r\n\r\n  const positive = countPositiveFeedbackPercentage();\r\n\r\n  return (\r\n    <Container>\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions\r\n          options={[\"good\", \"neutral\", \"bad\"]}\r\n          onLeaveFeedback={statCounter}\r\n        />\r\n      </Section>\r\n      <Section title=\"Statistics\">\r\n        {total > 0 ? (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={total}\r\n            positivePercentage={positive}\r\n          />\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </Section>\r\n    </Container>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}